const fs = require('fs');
const { app, requireAllLocals, requireAllRoutes, requireAllMiddlewares } = require('./server.js');
const { view } = require('./view.js');
const { getAll : allLocals } = require('./locals.js');


/** Import all routes */
requireAllRoutes();

/** Import all locals */
requireAllLocals();




// Set locals
app.use(async ( req, res, next)=>{

  // Add locals modules to the res.locals.
  res.locals = allLocals();
  next();
})





/** Import all middlewares */
requireAllMiddlewares();

/** All get routes which were not registred with requireAllRoutes functions will be considered as a route for an app. */
  app.get('/:param1?/:param2?/:param3?/:param4?', (req, res) => {
      let app_name = ( req.params.param1 ) ?? 'main';
      if( req.params.param2 ) app_name += `/${req.params.param2}`;
      if( req.params.param3 ) app_name += `/${req.params.param3}`;
      if( req.params.param4 ) app_name += `/${req.params.param4}`;
      /// Get config file
      let config = {
        res: res,
        req: req
      };
      if( fs.existsSync( `./frontend/dist/apps/${app_name}/config.json` ) ) {
        let c = fs.readFileSync(`./frontend/dist/apps/${app_name}/config.json`, "utf8");
        config = JSON.parse( c );
      }
      else config = { layout: 'shared/layouts/default', access: "public" };
      
      /// Pass req and res to ejs
      config.req = req;
      config.res = res;
      
      // For notfound app.
      config.app_exists = true;
      
      if( fs.existsSync( `./frontend/dist/apps/${app_name}/index.ejs` ) ) {
          config.app_name = app_name;
          if( config.access !== 'public' && !req.app.locals.user ) {
            res.cookie('redirect_to', app_name );
            res.redirect('/login');
          } else if ( req.app.locals.user && ['login', 'registration'].includes( app_name ) ) {
            res.redirect('/');
          }else{
            view( res, config);
          }
          
      }else {
        config.app_exists = false;
        config.app_name = 'notfound';
        config.notfound_app = app_name;
        view( res, config);
      }
    
  })
/** Not found page */
app.all('*', ( req, res )=>{
  res.json({"message":"Not found!"});
});



